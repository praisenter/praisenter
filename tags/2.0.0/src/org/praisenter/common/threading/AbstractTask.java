/*
 * Copyright (c) 2011-2013 William Bittle  http://www.praisenter.org/
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted 
 * provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice, this list of conditions 
 *     and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
 *     and the following disclaimer in the documentation and/or other materials provided with the 
 *     distribution.
 *   * Neither the name of Praisenter nor the names of its contributors may be used to endorse or 
 *     promote products derived from this software without specific prior written permission.
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.praisenter.common.threading;

/**
 * Represents an arbitrary long running task.
 * @author William Bittle
 * @version 1.0.0
 * @since 1.0.0
 */
public abstract class AbstractTask implements Runnable {
	/** True if the task was successful */
	private boolean successful;

	/** The exception generated in the {@link #run()} method, if any */
	private Exception exception;
	
	/**
	 * Default constructor.
	 */
	public AbstractTask() {
		this.successful = false;
		this.exception = null;
	}

	/**
	 * Method that should be called by the implementing class
	 * to handle any exceptions generated in the {@link #run()} method.
	 * @param exception the exception
	 */
	protected void handleException(Exception exception) {
		this.exception = exception;
	}
	
	/**
	 * Sets the successful flag.
	 * @param successful true if the task was successful
	 */
	protected void setSuccessful(boolean successful) {
		this.successful = successful;
	}
	
	/**
	 * Returns true if the task was successful.
	 * @return boolean
	 */
	public boolean isSuccessful() {
		return this.successful;
	}
	
	/**
	 * Returns the exception generated by the task, if any.
	 * @return Exception
	 */
	public Exception getException() {
		return this.exception;
	}
}
