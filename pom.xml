<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.praisenter</groupId>
	<artifactId>praisenter</artifactId>
	<version>3.0.1</version>
	<packaging>jar</packaging>

	<!-- General Project Information -->
	<name>Praisenter</name>
	<description>Free church presentation software package.</description>
	<url>http://www.praisenter.org</url>
	<inceptionYear>2014</inceptionYear>
	<organization>
		<name>Praisenter</name>
		<url>http://www.praisenter.org</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License v3</name>
			<url>https://www.gnu.org/licenses/gpl-3.0.en.html</url>
			<distribution>manual</distribution>
			<comments>This is the license for the packaged software.</comments>
		</license>
		<license>
			<name>3-Clause BSD License</name>
			<url>https://opensource.org/licenses/BSD-3-Clause</url>
			<distribution>manual</distribution>
			<comments>The Praisenter code is offered under the BSD 3-clause license.</comments>
		</license>
	</licenses>
	<developers>
		<developer>
			<name>William Bittle</name>
			<email>william.bittle@praisenter.org</email>
			<timezone>America/New_York</timezone>
		</developer>
	</developers>

<!-- Guides/Resources: -->
<!-- https://github.com/wiverson/maven-jpackage-template -->
<!-- https://docs.oracle.com/en/java/javase/14/docs/specs/man/jpackage.html -->
<!-- https://github.com/wixtoolset/wix3 -->
<!-- https://www.uuidgenerator.net -->
<!-- https://stackoverflow.com/questions/65862051/jvm-not-found-when-launching-a-javafx-app-deployed-with-jpackage-and-installed -->
<!-- https://stackoverflow.com/questions/51708581/issues-with-rangeslider-from-controlsfx -->
<!-- https://gluonhq.com/products/javafx/ -->
<!-- https://github.com/controlsfx/controlsfx/wiki/Using-ControlsFX-with-JDK-9-and-above -->

	<properties>
		<!-- Set this to the class with the main method for your application -->
        <main-class>org.praisenter.ui.Launcher</main-class>
        <!-- Change your app's name to something interesting... but you might want to avoid spaces
        just to safe for compatibility across operating systems. -->
        <app.name>Praisenter</app.name>
        <!-- This converts the build timestamp to a Windows-installer friendly version number (minute level resolution).
        Note that Maven generated timestamp is in UTC, not local time. For more information see:
         https://docs.microsoft.com/en-us/windows/win32/msi/productversion
         https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/text/SimpleDateFormat.html
         -->
        <maven.build.timestamp.format>yy.w.WWkkmm</maven.build.timestamp.format>
        <app.version>${maven.build.timestamp}</app.version>

		<!-- This property is used to specify the modules included in the (custom) JVM image. -->
        <!-- Reminder: javafx.web (the embedded browser component) is not included in this project by default due
        to GitHub template size restrictions. You can download the full SDK from https://openjfx.io -->
        <!-- This only needs to include modules part of the JVM or JavaFX jmods -->
        <jvm.modules>java.base,java.management,java.net.http,java.sql,java.xml,java.desktop,javafx.base,javafx.controls,javafx.graphics,javafx.media,javafx.swing,javafx.web</jvm.modules>

        <!-- Set the project to UTF-8, avoiding warnings in the build logs -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.source>16</maven.compiler.source>
        <maven.compiler.target>16</maven.compiler.target>

        <!-- Used to set both the path to find the JavaFX modules and also the versions for Maven dependencies -->
        <javafx.version>16</javafx.version>

        <!-- Replace this UUID with a custom one for your project. This ID is used by the Windows installer system
        to know that an installer is intended to replace/upgrade an earlier version. The easiest thing to do is
        grab a unique UUID via https://www.uuidgenerator.net -->
        <windows.upgrade.uuid>6aceec1c-b956-4da5-9475-6396c2c4bada</windows.upgrade.uuid>
        
        <!-- This is used to set many user-visible fields in the Windows Installer. See win-jpackage.txt -->
        <app.vendor>Praisenter</app.vendor>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.16.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.16.0</version>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>11.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.drewnoakes</groupId>
			<artifactId>metadata-extractor</artifactId>
			<version>2.16.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>3.7.0</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tiff</artifactId>
			<version>3.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
			<version>1.22</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.12.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>2.0.24</version>
		</dependency>
		<dependency>
			<groupId>com.sun.activation</groupId>
			<artifactId>javax.activation</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>17.0.1</version>
			<classifier>${jfx.platform}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>17.0.1</version>
			<classifier>${jfx.platform}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>17.0.1</version>
			<classifier>${jfx.platform}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>17.0.1</version>
			<classifier>${jfx.platform}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>17.0.1</version>
			<classifier>${jfx.platform}</classifier>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.8</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>8.8.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-memory</artifactId>
			<version>8.8.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-highlighter</artifactId>
			<version>8.8.2</version>
		</dependency>
	</dependencies>

	<build>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/package</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
                <includes>
                	<include>${platform}/**/*.*</include>
                </includes>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <includes>
                	<include>org/praisenter/**/**.*</include>
                	<include>org/praisenter/data/media/*</include>
                	<include>org/praisenter/data/media/tools/${platform}</include>
                </includes>
                <excludes>
                	<exclude>org/praisenter/data/media/tools</exclude>
                </excludes>
            </resource>
        </resources>
	
	<plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>16</source>
                    <target>16</target>
                    <release>16</release>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- This is an app, so we don't want to install it in the local Maven repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- This copies all of the jar files declared by the Maven build into a single directory.
                        This makes it easy to assemble the final installer package -->
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to duplicate
                            them in the bundled app and installer. This command skips all of the JavaFX by groupId. -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Put the application jar generated by the project into the dependency folder - the default folder
                for the maven-dependency-plugin output. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.5</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.34</version>
                <executions>
                    <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
                    this project with the JDK modules. -->
                    <execution>
                        <id>jlink</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                            <modulePath>${project.basedir}/package/${platform}/jmods/
                            </modulePath>
                            <addModules>${jvm.modules}</addModules>
                            <output>${project.build.directory}/jvm-image</output>
                            <args>
                                <arg>--strip-native-commands</arg>
                                <arg>--no-header-files</arg>
                                <arg>--strip-debug</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--compress=2</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.
                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                            <args>@${project.build.directory}/packaging/${platform}/jpackage.args</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>
                <!-- 
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.9.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M5</version>
                </plugin>
            </plugins>
        </pluginManagement>
	<!-- 
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>11</release>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.openjfx</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>0.0.4</version>
				<configuration>
					<mainClass>org.praisenter.ui.Praisenter</mainClass>
				</configuration>
			</plugin>
		</plugins>
		 -->
	</build>
	
	 <profiles>
        <!-- We use the built-in Maven profile activation system to set the platform property.
        These properties are then use to build the directory paths to the platform specific resources.
        It would be great if Maven automatically added the os family as a property by default
         -->
        <profile>
            <id>unix-active</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
            <properties>
                <platform>linux64</platform>
                <jfx.platform>linux</jfx.platform>
            </properties>
        </profile>
        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <platform>windows64</platform>
                <jfx.platform>win</jfx.platform>
            </properties>

        </profile>
        <profile>
            <id>mac-active</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <platform>macos64</platform>
                <jfx.platform>mac</jfx.platform>
            </properties>
        </profile>
    </profiles>
</project>
