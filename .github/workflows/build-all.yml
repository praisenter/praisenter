
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build All

on:
  #  push:
  #    branches: [ main ]
  #  pull_request:
  #    branches: [ main ]
  workflow_dispatch:
    branches: [ master ]

# env:
#   DEV_IDENTITY: BXPZTQZ35S # Your Apple Dev identity, something like BXPZTQZ35S
#   PRIMARY_BUNDLE_ID: com.example.App # Unique to your app, often the launcher class

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Get latest from the current branch
      - uses: actions/checkout@v2
      
      # This pulls the version number from the release-version.txt file
      - name: Read version
        id: readversion
        shell: pwsh
        run: |
          $content = Get-Content release-version.txt
          Write-Host "VERSION_NUMBER: $content"
          echo "VERSION_NUMBER=$content" >> $Env:GITHUB_ENV

      # Download WIX toolset (WINDOWS)
      - name: Download Wix
        uses: i3h/download-release-asset@v1
        if: matrix.os == 'windows-latest'
        with:
          owner: wixtoolset
          repo: wix3
          tag: wix3112rtm
          file: wix311-binaries.zip
      
      # Unzip WIX (WINDOWS)
      - name: Decompress Wix
        uses: DuckSoft/extract-7z-action@v1.0
        if: matrix.os == 'windows-latest'
        with:
          pathSource: wix311-binaries.zip
          pathTarget: ./target/wix

      # Add WIX to the Path (WINDOWS)
      - name: Add Wix to Path
        run: echo "$HOME/target/wix" >> $GITHUB_PATH
        if: matrix.os == 'windows-latest'

      # Add MSBuild (WINDOWS)
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        if: matrix.os == 'windows-latest'

      # Setup Java w/ JavaFX
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: 21.0.1
          distribution: 'zulu'
          java-package: jdk+fx
          cache: 'maven'
      
      # Run the Maven Build (WINDOWS/UBUNTU)
      - name: "Build with Maven"
        if: matrix.os != 'macos-latest'
        run: mvn -B clean install --file pom.xml

      # Now attempt to build the msix (WINDOWS)
      - name: "Set appxmanifest version number"
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $filePath = "./packaging/windows64/msix/Praisenter/Package.appxmanifest"
          $xml = [xml](Get-Content -Path $filePath)
          $xml.Package.Identity.Name = "${{ secrets.MSIX_IDENTITY_NAME }}"
          $xml.Package.Identity.Publisher = "${{ secrets.MSIX_IDENTITY_PUBLISHER }}"
          $xml.Package.Identity.Version = "${{ env.VERSION_NUMBER }}.0"
          $xml.Save($filePath)

      # Copy all the build artifacts to the /App folder (WINDOWS)
      - name: "Copy application msix location"
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "./packaging/windows64/msix/Praisenter/App"
          Copy-Item -Path "./target/installer-work/images/win-msi.image/Praisenter/*" -Destination "./packaging/windows64/msix/Praisenter/App" -Recurse

      # Build the msixupload file (WINDOWS)
      - name: Build MSIX package
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Push-Location -Path ./packaging/windows64/msix/Praisenter
          MSBuild.exe /nologo /restore /p:AppxBundle=Never /p:UapAppxPackageBuildMode=StoreUpload  /p:Configuration=Release /p:Platform=x64 /p:AppxPackageDir=..\..\..\..\target\ /p:AppxPackageSigningEnabled=false
          Pop-Location

      # Copy deb to snap folder (UBUNTU)
      - name: Copy deb to snap folder
        if: matrix.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          Copy-Item "./target/praisenter_${{ env.VERSION_NUMBER }}_amd64.deb" "./packaging/linux64/snap/praisenter.deb"

      # Update metainfo.xml (UBUNTU)
      - name: Set metainfo.xml version number
        if: matrix.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          $filePath = "./packaging/linux64/snap/metainfo.xml"
          $date = Get-Date -Format "yyyy-MM-dd"
          $xml = [xml](Get-Content -Path $filePath)
          $xml.component.releases.release.version = "${{ env.VERSION_NUMBER }}"
          $xml.component.releases.release.date = "$date"
          $xml.Save($filePath)

      # Install snapcraft (UBUNTU)
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2

      # Build the snap file (UBUNTU)
      - name: Build snap file
        if: matrix.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          Push-Location -Path ./packaging/linux64/snap/
          snapcraft
          Pop-Location

      # Copy snap to target folder (UBUNTU)
      - name: Copy snap to target folder
        if: matrix.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          Copy-Item "./packaging/linux64/snap/praisenter.snap" "./target/praisenter_${{ env.VERSION_NUMBER }}_amd64.snap"

      # - name: "Build with Maven (macOS No Signing)"
      #   env:
      #     MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      #     MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      #   if: ${{ env.MACOS_CERTIFICATE == null && matrix.os == 'macos-latest' }}
      #   run: mvn -B clean install --file pom.xml
      # - name: "Build with Maven (macOS Signed)"
      #   env:
      #     MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      #     MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      #   if: ${{ env.MACOS_CERTIFICATE != null && matrix.os == 'macos-latest' }}
      #   run: |
      #     echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
      #     security create-keychain -p temppass build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p temppass build.keychain
      #     security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temppass build.keychain
      #     export IDENTITY=$(security find-identity -v)
      #     echo $(security find-identity -v)
      #     mvn -B clean install  -Pmacos-sign --file pom.xml
      # - name: "Codesign DMG"
      #   env:
      #     MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      #     MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      #   if: ${{ env.MACOS_CERTIFICATE != null && matrix.os == 'macos-latest' }}
      #   run: |
      #     export DMG_PATH=$(ls ./target/*.dmg)
      #     /usr/bin/codesign --deep --force -s ${{ env.DEV_IDENTITY}} $DMG_PATH -v
      #     echo DMG_PATH=$DMG_PATH >> $GITHUB_ENV
      #     echo ${{ env.DMG_PATH }}
      # - name: "Notarize DMG"
      #   env:
      #     APP_EMAIL: ${{ secrets.APP_EMAIL }}
      #     APP_PASS: ${{ secrets.APP_PASS }}
      #   if: ${{ env.APP_EMAIL != null && matrix.os == 'macos-latest' }}
      #   uses: GuillaumeFalourd/xcode-notarize@v1
      #   with:
      #     product-path: ${{ env.DMG_PATH }}
      #     primary-bundle-id: ${{ env.PRIMARY_BUNDLE_ID }}
      #     appstore-connect-username: ${{ secrets.APP_EMAIL }}
      #     appstore-connect-password: ${{ secrets.APP_PASS }}
      # - name: "Staple DMG"
      #   env:
      #     APP_EMAIL: ${{ secrets.APP_EMAIL }}
      #     APP_PASS: ${{ secrets.APP_PASS }}
      #   if: ${{ env.APP_EMAIL != null && matrix.os == 'macos-latest' }}
      # ISSUE: this package doesn't exist anymore
      #   uses: devbotsxyz/xcode-staple@v1
      #   with:
      #     product-path: ${{ env.DMG_PATH }}

      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          retention-days: 1
          path: |
            ./target/*.msi
            ./target/*.msixupload
            ./target/*.deb
            ./target/*.snap
          # ${{ env.DMG_PATH }}

  github-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Get latest from the current branch
      - uses: actions/checkout@v2

      # This pulls the version number from the release-version.txt file
      - name: Read version
        id: readversion
        shell: pwsh
        run: |
          $content = Get-Content release-version.txt
          Write-Host "VERSION_NUMBER: $content"
          echo "VERSION_NUMBER=$content" >> $Env:GITHUB_ENV

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v3

      # Now create the LATEST release
      - name: Update Latest Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          automatic_release_tag: latest
          prerelease: false
          title: Praisenter Latest
          files: |
            ./dist-windows-latest/*.msi
            ./dist-windows-latest/*.msixupload
            ./dist-ubuntu-latest/*.deb
            ./dist-ubuntu-latest/*.snap
          # ./dist-macos-latest/*.dmg

      # Create one release called 3.2.1 (for example)
      - name: Create Versioned Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          automatic_release_tag: ${{ env.VERSION_NUMBER }}
          prerelease: false
          title: Praisenter v${{ env.VERSION_NUMBER }}
          files: | 
            ./dist-windows-latest/*.msi
            ./dist-windows-latest/*.msixupload
            ./dist-ubuntu-latest/*.deb
            ./dist-ubuntu-latest/*.snap
          # ./dist-macos-latest/*.dmg

      # Now pull the latest release body
      - name: Read release notes
        id: release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: latest

      # Now update the versioned release with the same body
      - name: Copy release notes
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION_NUMBER }}
          body: ${{ steps.release.outputs.body }}
          allow_override: true

  store-deploy:
    needs: github-release
    runs-on: ubuntu-latest
    steps:
      # Get latest from the current branch
      - uses: actions/checkout@v2

      # This pulls the version number from the release-version.txt file
      - name: Read version
        id: readversion
        shell: pwsh
        run: |
          $content = Get-Content release-version.txt
          Write-Host "VERSION_NUMBER: $content"
          echo "VERSION_NUMBER=$content" >> $Env:GITHUB_ENV

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v3

      # now push to the stores